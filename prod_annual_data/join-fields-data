/*
After applying the eeprod/tseb_ts.py and eeprod/tseb_agg.py process, 
the following files were uploaded to 
projects/halo-mewa/assets/fields/annual_data_processed 
:
"2022-AJ", "2022-EP", "2022-HL", "2022-MD",
"2022-QS1", "2022-QS2", "2022-QS3", "2022-QS4",
"2022-RD", "2022-TB"

note that locally the files are stored in
mewagee/data/f16D/2022/
with the extension _Y.csv

These csv files only contain the data for each field, i.e.:
ETy, ETy_CM, NDVI, area, bare_cover, cloud_cover, date, fieldUse, fieldUseDays, uid

Here we read all of these tables, look for each field geometry by uid
from:
projects/halo-mewa/assets/fields/tli-v0/2022

and export the result as an asset. This will THEN be exported as GeoJSON and SHP files.  

Note: uid will be renamed to "label" and we will only export the following:

label:f.get("uid"),   /// CHANGED label to uid! 
area: f.get("area"),
useDays: f.get("fieldUseDays"),
NDVI: f.get("NDVI"),
fieldUse: f.get("fieldUse"),
ET: f.get("ETy"),
ETm3: f.get("ETy_CM")


*/
var region_names = ["AJ","EP","HL","MD","QS1","QS2","QS3","QS4","RD","TB"]
function getList(year){
  if (year==2019){region_names = region_names.concat(["QS5"])}
  // Every year we have the same, except for 2019 also has QS5
  var files=region_names.map(function(n){
    return ee.FeatureCollection(
      "projects/halo-mewa/assets/fields/annual_data_processed/"+year+"-"+n
      )
  })
  return files
}


function do_join_for_year(year_to_export){
  // var fY = ee.FeatureCollection(list_of_fc)
  // .filter(ee.Filter.eq("year", year_to_export));
  // var files_YEAR = fY.aggregate_array("id").getInfo(); // We will do a mapping in the client.
  // // Now work only on the year 2020:
  // // For each feature in ff, do the process
  // // to return a batch feature collection:
  // //print(files_2020)  // these are the files we will be working with,
  // // it is a subset of all the files in listAssets. 
  var files_YEAR = getList(year_to_export)
  
  var field_delineation_asset_YEAR="projects/halo-mewa/assets/fields/tli-v0/"+year_to_export;
  var field_delineations = ee.FeatureCollection(field_delineation_asset_YEAR);
  
  var data_cols=["uid","area","fieldUseDays","fieldUse","NDVI","ETy","ETy_CM"];
  var renamed=["label","area","useDays","fieldUse","NDVI","ET","ETm3"];
  
  function join_data(file){
  var fields_data_table = ee.FeatureCollection(file).filter(ee.Filter.notNull(["NDVI"]));
  var filterByUid = ee.Filter.equals({leftField:'uid', rightField:'uid'});
  var joinByLabel = ee.FeatureCollection(
    ee.Join.inner().apply(field_delineations, fields_data_table, filterByUid)
    );
    function return_field_with_data(f){
    var field_delineation = ee.Feature(f.get("primary"));
    var field_data = ee.Feature(f.get("secondary"));
    return field_delineation.copyProperties(field_data, data_cols);
    }
  var fields_with_data = joinByLabel.map(return_field_with_data);
  return fields_with_data;
  } // Function to apply to ONE file
  var all = ee.FeatureCollection(files_YEAR.map(join_data)).flatten()
  .select(data_cols.concat(["ftype"]),renamed.concat(["ftype"]),true); //retainGeometry:true
  Export.table.toAsset(all,"Join-all-2022","projects/halo-mewa/assets/fields/annual_"+year_to_export);
}

do_join_for_year(2021);