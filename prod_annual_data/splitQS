/* 
Pre-split the QS fields (computation is too large!!)
e.g. first export QS fields as large batches (property: S)
there are about 20,000 fields
Let's make collections of 5,000 fields each
then we can use the 500-size batch process for
each 5000 fields -- which we know works (e.g. for al Jawf) 
*/
var year=2015;

var fields = ee.FeatureCollection("projects/halo-mewa/assets/fields/tli-v0/"+year);
var regions = ee.FeatureCollection("projects/halo-mewa/assets/regions-multi");


var split = require("users/oliverlopez/mewa-apps:util/splitFC")
var region = regions.filter(ee.Filter.eq("region","QS"))
var f = fields.filterBounds(region).sort("uid")

//print(f.size())
// 2022: 19449, 
// 2021: 18703,
// 2020: 17026,
// 2019: 22866,
// 2018: 19436,
// 2017: 19315,
// 2016: 19984,
// 2015: 19515

//print(f.limit(5))
var ff= ee.FeatureCollection(split.s(f, 5000, "S", "uid"))
// Export each collection separately -- we know how many we will have!
// 2022: 19449 -- so there are 4 collections of ~5000 each
function do_export(n){
  var C = ff.filter(ee.Filter.eq("S",n))
  Export.table.toAsset({
    collection: C,
    description: "split-QS-"+n+"-"+year,
    assetId:"projects/halo-mewa/assets/fields/tli-v0/"+year+"-QS"+n
  })
}
[1,2,3,4].map(do_export) 
//do_export(5) // for 2019 only.

// When we process QS for other years, we can do the same.
// This took 4 min to do and will save lots of computation
// for the batch processing.. hopefully. 

//e.g.:
// Map.addLayer(
//   ee.FeatureCollection("projects/halo-mewa/assets/fields/tli-v0/2022-QS-1")
// )
// Map.addLayer(
//   ee.FeatureCollection("projects/halo-mewa/assets/fields/tli-v0/2022-QS-2")
// )
// Map.addLayer(
//   ee.FeatureCollection("projects/halo-mewa/assets/fields/tli-v0/2022-QS-3")
// )
// Map.addLayer(
//   ee.FeatureCollection("projects/halo-mewa/assets/fields/tli-v0/2022-QS-4")
// )
  
