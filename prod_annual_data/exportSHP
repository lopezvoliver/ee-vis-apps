/*
After using users/oliverlopez/mewa-apps:prod_annual_data/join-fields-data,
here we simply export to cloud storage as shape and geojson
There is no need to change names, as it already contains the following attributes:

ET, ETm3, NDVI, area, fieldUse, ftype, label, useDays

Note: label is the new style uid..
*/

function export_year(year){
var fc = ee.FeatureCollection(
  "projects/halo-mewa/assets/fields/annual_"+year)
// .map(function(f){
//   //var geom_type=f.geometry().type()
//   return ee.Feature(f.geometry(), { 
//     label:f.get("uid"),   /// CHANGED label to uid! 
//     area: area,
//     useDays: f.get("season_mask_sum"),
//     NDVI: f.get("NDVI_mean"),
//     fieldUse: f.get("season_mask_mean"),
//     ET: ET,
//     ETm3: waterUse,
//     geom_type:geom_type
//   })
// })
//.filter(ee.Filter.notNull(["NDVI"])) // aready done in join-fields-data
// above is not needed anymore!

Export.table.toCloudStorage({
  collection:fc,
  bucket: "mewa",
  fileNamePrefix: "fields/"+year+"-ETm3", // -ETm3 to be removed --
  // keeping now for consistency with app v.38
  description:"export-gs-fields-annual_data-geojson-"+year,
  fileFormat:"GeoJSON"
})

Export.table.toCloudStorage({
  collection:fc,
  bucket: "mewa",
  fileNamePrefix: "fields/"+year+"-ETm3",
  description:"export-gs-fields-annual_data-shp-"+year,
  fileFormat:"SHP"
//  selectors:["label","area","useDays","NDVI","fieldUse","ET","ETm3","ftype"]
})
}
export_year(2022);
//[2015,2016,2017,2018,2019,2020,2021,2022].map(export_year)